"use strict";var __importDefault=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.BuildNativeWithNinja=void 0;const fs_extra_1=__importDefault(require("fs-extra")),path_1=__importDefault(require("path")),native_command_builder_js_1=require("../builder/native-command-builder.js"),common_const_js_1=require("../const/common-const.js"),cpu_abi_enum_js_1=require("../enum/cpu-abi-enum.js"),file_util_js_1=require("../utils/file-util.js"),ohos_logger_js_1=require("../utils/log/ohos-logger.js"),task_names_js_1=require("./common/task-names.js"),build_native_with_cmake_js_1=require("./build-native-with-cmake.js");var Task=task_names_js_1.TaskNames.Task;const hvigor_1=require("@ohos/hvigor"),cmake_util_js_1=require("../utils/cmake-util.js"),abstract_build_native_js_1=require("./abstract-build-native.js");class BuildNativeWithNinja extends abstract_build_native_js_1.AbstractBuildNative{constructor(t){super(t,Task.BUILD_NATIVE_WITH_NINJA),this._log=ohos_logger_js_1.OhosLogger.getLogger(BuildNativeWithNinja.name),this.localHsp=this.service.getDependencyInfo().getHspDependencies().map((t=>t.getDependencyRootPath()))}initTaskDepends(){var t,e,a;this.declareDepends(build_native_with_cmake_js_1.BuildNativeWithCmake.name);for(const i of this.service.getDependencyInfo().getModuleDependencyMap().keys()){const s=null!==(e=null!==(t=this.projectModel.getTarget(i,this.targetName))&&void 0!==t?t:this.projectModel.getTarget(i,"default"))&&void 0!==e?e:this.projectModel.getTarget(i),o=null!==(a=null==s?void 0:s.getTargetData().getTargetName())&&void 0!==a?a:"default";this.declareDepends(`${o}@${Task.DO_NATIVE_STRIP.name}`,i)}}async buildCommand(t,e,a,i,s){var o;const r=e.getPathInfo(),n=path_1.default.resolve(r.getNinjaWorkDir(),t),l=new native_command_builder_js_1.NativeCommandBuilder(this.sdkInfo.getNativeNinjaTool()).changeToDir(n).build();(null===(o=this._nativeOption)||void 0===o?void 0:o.targets)&&this._nativeOption.targets.length>0&&l.push(...this._nativeOption.targets),this._log._printDebugCommand("Ninja",l),s.stop(),s.setLog(s.getName(),hvigor_1.MetricLogType.INFO);const _=`submit CMake task to work pool with ABI of ${t}`,u=this.durationEvent.createSubEvent(_,"");u.start(),await this.executeCommand(l,n,a,i,u),u.stop(),u.setLog(_,hvigor_1.MetricLogType.INFO)}taskShouldDo(){return cmake_util_js_1.CmakeUtil.nativeTaskCondition(this.moduleModel,this.targetData,this._nativeOption)}beforeTask(){fs_extra_1.default.emptyDirSync(this.pathInfo.getIntermediatesCppOutPut())}async doTaskAction(){var t;const e=this.targetData.getPathInfo(),a=path_1.default.resolve(e.getIntermediatesCppOutPut()),i=cmake_util_js_1.CmakeUtil.checkAbiFilters(null===(t=this._nativeOption)||void 0===t?void 0:t.abiFilters,this.targetData.isHarmonyOS(),this.moduleModel,this.targetName);for(const t of i){const i=`generate Ninja command with ABI of ${t}`,s=this.durationEvent.createSubEvent(i,"");s.start();const o=path_1.default.resolve(a,t),r=path_1.default.resolve(e.getNinjaWorkDir(),t);await this.buildCommand(t,this.targetData,(async()=>{const e=cmake_util_js_1.CmakeUtil.parseLibraries(r,this.targetName,t);await this.syncOutput(e,o,r)}),[],s),await this.syncStl(t,o,r,e)}}async syncOutput(t,e,a){var i;const s=new Map,o=null===(i=this._nativeOption)||void 0===i?void 0:i.targets;for(const[i,r]of t.entries())o&&o.length>0&&-1===o.indexOf(i)?this._log.debug(`Case targets are configured, dependency ${i} are not synchronized.`):await this.syncLibOutputs(r,e,a,s)}async syncLibOutputs(t,e,a,i){const s=t.getNameOnDisk();if(!s)return;const o=path_1.default.resolve(e,s),r=t.getOutputs().map((t=>path_1.default.isAbsolute(t)?path_1.default.resolve(t):path_1.default.resolve(a,t))).filter((t=>fs_extra_1.default.existsSync(t)&&!hvigor_1.PathUtil.checkCopyPathIsSame(t,o)));for(const t of r)this._log.debug(`External build set its own library output location for ${s}, which will be hard linked or copy to the expected location.`),await file_util_js_1.FileUtil.linkFile(t,o);await this.syncLibDeps(t,e,a,i)}async syncLibDeps(t,e,a,i){const s=path_1.default.normalize(this.sdkInfo.getSdkNativeDir()),o=this.targetData.isHarmonyOS()?path_1.default.normalize(this.sdkInfo.getHmsNativeDir()):void 0;for(let r of t.getRuntimeFiles()){r=path_1.default.isAbsolute(r)?path_1.default.resolve(r):path_1.default.resolve(a,r),r=path_1.default.normalize(r),this._log.debug(`Sync native runtime file ${r}.`);const t=path_1.default.resolve(e,path_1.default.basename(r));if(!fs_extra_1.default.existsSync(r)||hvigor_1.PathUtil.checkCopyPathIsSame(r,t)||this.excludeFromHsp(r))continue;const n=this.targetService.getNativeLibOption();this.moduleModel.isHarModule()&&(void 0===n.excludeFromHar||n.excludeFromHar)&&this.excludeFromHar(r)?this._log.debug(`Exclude from har: ${r}`):i.get(r)&&i.get(r)===t||(o&&r.startsWith(o)||r.startsWith(s)?i.set(r,t):(i.set(r,t),await file_util_js_1.FileUtil.linkFile(r,t)))}}async syncStl(t,e,a,i){const s=cmake_util_js_1.CmakeUtil.parseStlFromCMakeCache(a),o="c++_static"===s.value||"none"===s.value,r=path_1.default.resolve(e,"libc++.so"),n=path_1.default.resolve(e,common_const_js_1.NativeConst.SHARED_STL_LIBRARY),l=path_1.default.resolve(i.getModuleBuildIntermediates(),"libs",t);if(this._log.debug(`Copy STL ${common_const_js_1.NativeConst.SHARED_STL_LIBRARY} to ${e} due to OHOS_STL is 'c++_shared'`),o)return fs_extra_1.default.removeSync(r),fs_extra_1.default.removeSync(n),void fs_extra_1.default.removeSync(l);const _=path_1.default.resolve(this.sdkInfo.getSdkNativeDir(),"llvm","lib",cpu_abi_enum_js_1.CpuAbiEnum.getCpuType(t),"c++"),u=path_1.default.resolve(_,common_const_js_1.NativeConst.SHARED_STL_LIBRARY);if(!fs_extra_1.default.existsSync(u))return void this._log.warn(`Missing stl library ${u};`);const d=fs_extra_1.default.statSync(u);if(fs_extra_1.default.existsSync(n)){const t=fs_extra_1.default.statSync(n);if(d.size===t.size&&d.mtimeMs===t.mtimeMs)return}await fs_extra_1.default.copy(u,n,{overwrite:!0,recursive:!0})}excludeFromHsp(t){return!!this.localHsp.find((e=>path_1.default.normalize(t).startsWith(path_1.default.normalize(e))))}excludeFromHar(t){return t=path_1.default.normalize(fs_extra_1.default.realpathSync(t)),!!this.service.getHarDependencies().find((e=>{const a=path_1.default.normalize(e.getDependencyRootPath()),i=path_1.default.relative(a,t);return!i.startsWith("..")&&!path_1.default.isAbsolute(i)}))}}exports.BuildNativeWithNinja=BuildNativeWithNinja;