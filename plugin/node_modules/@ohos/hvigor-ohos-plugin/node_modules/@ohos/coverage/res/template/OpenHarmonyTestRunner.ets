import hilog from '@ohos.hilog';
import TestRunner from '@ohos.application.testRunner';
import AbilityDelegatorRegistry from '@ohos.app.ability.abilityDelegatorRegistry';
import Want from '@ohos.app.ability.Want';

let abilityDelegator: AbilityDelegatorRegistry.AbilityDelegator
let abilityDelegatorArguments: AbilityDelegatorRegistry.AbilityDelegatorArgs | undefined = undefined
let tag: string = 'testTag';
const UNLOCK_ERROR = -3;

async function onAbilityCreateCallback() {
  hilog.info(0x0000, 'testTag', '%{public}s', 'onAbilityCreateCallback');
}

async function addAbilityMonitorCallback(err : Error) {
  hilog.info(0x0000, 'testTag', 'addAbilityMonitorCallback : %{public}s', JSON.stringify(err) ?? '');
}

export default class OpenHarmonyTestRunner implements TestRunner {
  constructor() {
  }

  onPrepare() {
    hilog.info(0x0000, 'testTag', '%{public}s', 'OpenHarmonyTestRunner OnPrepare ');
  }

  async onRun() {
    hilog.info(0x0000, 'testTag', '%{public}s', 'OpenHarmonyTestRunner onRun run');
    abilityDelegatorArguments = AbilityDelegatorRegistry.getArguments()
    abilityDelegator = AbilityDelegatorRegistry.getAbilityDelegator()
    const bundleName = abilityDelegatorArguments.bundleName;
    const testAbilityName = 'TestAbility';
    const moduleName = abilityDelegatorArguments.parameters['-m'];
    let lMonitor: AbilityDelegatorRegistry.AbilityMonitor = {
      abilityName: testAbilityName,
      onAbilityCreate: onAbilityCreateCallback,
      moduleName: moduleName
    };
    abilityDelegator.addAbilityMonitor(lMonitor, addAbilityMonitorCallback)
    await startAbility(bundleName, testAbilityName);
    hilog.info(0x0000, 'testTag', '%{public}s', 'OpenHarmonyTestRunner onRun end');
  }
}

async function startAbility(bundleName: string, abilityName: string) {
  await abilityDelegator.executeShellCommand(`aa start -b ${bundleName} -a ${abilityName}`).then(result => {
    if (result.stdResult.includes("error: unlock screen failed in developer mode")) {
      hilog.info(0x0000, tag, '%{public}s', `startAbility failed ${result.stdResult}`);
      abilityDelegator.finishTest("", UNLOCK_ERROR, () => {});
      return;
    }
    attachAbility(bundleName);
  }).catch((err: string) => {
    hilog.info(0x0000, tag, '%{public}s', `startAbility error: ${err}`);
  })
}

async function attachAbility(bundleName: string) {
  await abilityDelegator.executeShellCommand(`aa attach -b ${bundleName}`).then(result => {
    hilog.info(0x0000, tag, '%{public}s', `attachAbility ${result.stdResult}`);
  }).catch((err: string) => {
    hilog.error(0x0000, tag, `%{public}s`, `attachAbility error: ${err}`);
  })
}