export interface nycCommandsType {
    all: (string | null)[];
    testExclude: (string | null)[];
    instrument: (string | null)[];
    checkCoverage: (string | null)[];
    report: (string | null)[];
    main: null[];
    instrumentOnly: string[];
}
export interface cwdType {
    description: string;
    type: string;
    readonly default: string;
    nycCommands: (string | null)[];
}
export interface nycrcPathType {
    description: string;
    nycCommands: (string | null)[];
}
export interface tempDirType {
    description: string;
    type: string;
    default: string;
    nycAlias: string;
    nycHiddenAlias: string;
    nycCommands: (string | null)[];
}
export interface testExcludeType {
    exclude: {
        description: string;
        type: string;
        items: {
            type: string;
        };
        default: string[];
        nycCommands: (string | null)[];
        nycAlias: string;
    };
    excludeNodeModules: {
        description: string;
        type: string;
        default: boolean;
        nycCommands: (string | null)[];
    };
    include: {
        description: string;
        type: string;
        items: {
            type: string;
        };
        default: never[];
        nycCommands: (string | null)[];
        nycAlias: string;
    };
    extension: {
        description: string;
        type: string;
        items: {
            type: string;
        };
        default: string[];
        nycCommands: (string | null)[];
        nycAlias: string;
    };
}
export interface visitorType {
    coverageVariable: {
        description: string;
        type: string;
        default: string;
        nycCommands: (string | null)[];
    };
    coverageGlobalScope: {
        description: string;
        type: string;
        default: string;
        nycCommands: (string | null)[];
    };
    coverageGlobalScopeFunc: {
        description: string;
        type: string;
        default: boolean;
        nycCommands: (string | null)[];
    };
    ignoreClassMethods: {
        description: string;
        type: string;
        items: {
            type: string;
        };
        default: never[];
        nycCommands: (string | null)[];
    };
}
export interface parseGenType {
    autoWrap: {
        description: string;
        type: string;
        default: boolean;
        nycCommands: (string | null)[];
    };
    esModules: {
        description: string;
        type: string;
        default: boolean;
        nycCommands: (string | null)[];
    };
    parserPlugins: {
        description: string;
        type: string;
        items: {
            type: string;
        };
        default: string[];
        nycCommands: (string | null)[];
    };
    compact: {
        description: string;
        type: string;
        default: boolean;
        nycCommands: (string | null)[];
    };
    preserveComments: {
        description: string;
        type: string;
        default: boolean;
        nycCommands: (string | null)[];
    };
    produceSourceMap: {
        description: string;
        type: string;
        default: boolean;
        nycCommands: (string | null)[];
    };
}
export interface checkCoverageType {
    excludeAfterRemap: {
        description: string;
        type: string;
        default: boolean;
        nycCommands: (string | null)[];
    };
    branches: {
        description: string;
        type: string;
        default: number;
        minimum: number;
        maximum: number;
        nycCommands: (string | null)[];
    };
    functions: {
        description: string;
        type: string;
        default: number;
        minimum: number;
        maximum: number;
        nycCommands: (string | null)[];
    };
    lines: {
        description: string;
        type: string;
        default: number;
        minimum: number;
        maximum: number;
        nycCommands: (string | null)[];
    };
    statements: {
        description: string;
        type: string;
        default: number;
        minimum: number;
        maximum: number;
        nycCommands: (string | null)[];
    };
    perFile: {
        description: string;
        type: string;
        default: boolean;
        nycCommands: (string | null)[];
    };
}
export interface reportType {
    checkCoverage: {
        description: string;
        type: string;
        default: boolean;
        nycCommands: (string | null)[];
    };
    reporter: {
        description: string;
        type: string;
        items: {
            type: string;
        };
        default: string[];
        nycCommands: (string | null)[];
        nycAlias: string;
    };
    reportDir: {
        description: string;
        type: string;
        default: string;
        nycCommands: (string | null)[];
    };
    showProcessTree: {
        description: string;
        type: string;
        default: boolean;
        nycCommands: (string | null)[];
    };
    skipEmpty: {
        description: string;
        type: string;
        default: boolean;
        nycCommands: (string | null)[];
    };
    skipFull: {
        description: string;
        type: string;
        default: boolean;
        nycCommands: (string | null)[];
    };
}
export interface nycMainType {
    silent: {
        description: string;
        type: string;
        default: boolean;
        nycCommands: null[];
        nycAlias: string;
    };
    all: {
        description: string;
        type: string;
        default: boolean;
        nycCommands: null[];
        nycAlias: string;
    };
    eager: {
        description: string;
        type: string;
        default: boolean;
        nycCommands: null[];
    };
    cache: {
        description: string;
        type: string;
        default: boolean;
        nycCommands: null[];
        nycAlias: string;
    };
    cacheDir: {
        description: string;
        type: string;
        nycCommands: null[];
    };
    babelCache: {
        description: string;
        type: string;
        default: boolean;
        nycCommands: null[];
    };
    useSpawnWrap: {
        description: string;
        type: string;
        default: boolean;
        nycCommands: null[];
    };
    hookRequire: {
        description: string;
        type: string;
        default: boolean;
        nycCommands: null[];
    };
    hookRunInContext: {
        description: string;
        type: string;
        default: boolean;
        nycCommands: null[];
    };
    hookRunInThisContext: {
        description: string;
        type: string;
        default: boolean;
        nycCommands: null[];
    };
    clean: {
        description: string;
        type: string;
        default: boolean;
        nycCommands: null[];
    };
}
export interface instrumentOnlyType {
    inPlace: {
        description: string;
        type: string;
        default: boolean;
        nycCommands: string[];
    };
    exitOnError: {
        description: string;
        type: string;
        default: boolean;
        nycCommands: string[];
    };
    delete: {
        description: string;
        type: string;
        default: boolean;
        nycCommands: string[];
    };
    completeCopy: {
        description: string;
        type: string;
        default: boolean;
        nycCommands: string[];
    };
}
export interface nycType {
    description: string;
    type: string;
    properties: {
        cwd: cwdType;
        nycrcPath: nycrcPathType;
        tempDir: tempDirType;
        sourceMap: {
            description: string;
            type: string;
            default: boolean;
            nycCommands: (string | null)[];
        };
        require: {
            description: string;
            type: string;
            items: {
                type: string;
            };
            default: never[];
            nycCommands: (string | null)[];
            nycAlias: string;
        };
        instrument: {
            description: string;
            type: string;
            default: boolean;
            nycCommands: (string | null)[];
        };
    } & visitorType & parseGenType & testExcludeType & nycMainType & instrumentOnlyType & checkCoverageType & reportType;
}
export interface configsType {
    nyc: nycType;
    testExclude: {
        description: string;
        type: string;
        properties: {
            cwd: cwdType;
        } & testExcludeType;
    };
    babelPluginIstanbul: {
        description: string;
        type: string;
        properties: {
            cwd: cwdType;
        } & testExcludeType & visitorType;
    };
    instrumentVisitor: {
        description: string;
        type: string;
        properties: visitorType;
    };
    instrumenter: {
        description: string;
        type: string;
        properties: {} & visitorType & parseGenType;
    };
}
