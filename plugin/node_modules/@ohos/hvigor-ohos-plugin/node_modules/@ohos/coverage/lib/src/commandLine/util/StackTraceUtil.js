"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getString = exports.getStackTrace = exports.isStackTrace = void 0;
const StackTrace_1 = require("./StackTrace");
const STACK_TRACE_PATTERN = / {4}at \w+? \(.+?:\d+?:\d+?\)/;
const STACK_TRACE_HEADER = '    at ';
function isStackTrace(line) {
    return line.match(STACK_TRACE_PATTERN);
}
exports.isStackTrace = isStackTrace;
function getStackTrace(line) {
    let functionName = line.substring(STACK_TRACE_HEADER.length, line.indexOf('(') - 1);
    let filePath = line.substring(line.indexOf(('(')) + 1, line.indexOf(':'));
    let moduleName = getModuleNameFromStackTrace(filePath);
    let split = line.substring(0, line.length - 1).split(':');
    let row = getRowColumnNumber(split[1]);
    let column = getRowColumnNumber(split[2]);
    return new StackTrace_1.StackTrace(functionName, filePath, moduleName, row, column);
}
exports.getStackTrace = getStackTrace;
function getString(stackTrace) {
    return STACK_TRACE_HEADER + stackTrace.functionName + ' (' + stackTrace.filePath + ':' + stackTrace.row + ':' + stackTrace.column + ')';
}
exports.getString = getString;
function getModuleNameFromStackTrace(fileNameFromStackTrace) {
    let split = fileNameFromStackTrace.split(/[/|]/);
    if (split.length == 0) {
        return '';
    }
    return split[0];
}
function getRowColumnNumber(strNum) {
    try {
        return parseInt(strNum);
    }
    catch (e) {
        return 0;
    }
}
