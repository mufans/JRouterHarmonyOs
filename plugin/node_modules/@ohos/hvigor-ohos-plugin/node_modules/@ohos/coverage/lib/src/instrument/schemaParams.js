"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.testExclude = exports.tempDir = exports.nycrcPath = exports.cwd = exports.nycCommands = void 0;
const extensionsList = ['.js', '.cjs', '.mjs', '.ts', '.tsx', '.jsx'];
const testExtensions = extensionsList
    .map((extension) => extension.slice(1))
    .join(',');
const excludesList = [
    'coverage/**',
    'packages/*/test{,s}/**',
    `test{,-*}.{${testExtensions}}`,
    `**/*{.,-}test.{${testExtensions}}`,
    '**/*.d.ts',
    'test{,s}/**',
    '**/__tests__/**',
    /* Exclude common development tool configuration files */
    '**/{karma,rollup,webpack}.config.js',
    '**/.{eslint,mocha}rc.{js,cjs}',
    '**/jest.config.{js,cjs,mjs,ts}',
    '**/{ava,babel,nyc}.config.{js,cjs,mjs}',
];
exports.nycCommands = {
    all: ['check-coverage', 'instrument', 'merge', 'report', null],
    testExclude: ['instrument', 'report', 'check-coverage', null],
    instrument: ['instrument', null],
    report: ['report', null],
    main: [null],
    checkCoverage: ['report', 'check-coverage', null],
    instrumentOnly: ['instrument'],
};
exports.cwd = {
    description: 'working directory used when resolving paths',
    type: 'string',
    get default() {
        return process.cwd();
    },
    nycCommands: exports.nycCommands.all,
};
exports.nycrcPath = {
    description: 'specify an explicit path to find nyc configuration',
    nycCommands: exports.nycCommands.all,
};
exports.tempDir = {
    description: 'directory to output raw coverage information to',
    type: 'string',
    default: './.nyc_output',
    nycAlias: 't',
    nycHiddenAlias: 'temp-directory',
    nycCommands: [null, 'check-coverage', 'merge', 'report'],
};
exports.testExclude = {
    exclude: {
        description: 'a list of specific files and directories that should be excluded from coverage, glob patterns are supported',
        type: 'array',
        items: {
            type: 'string',
        },
        default: excludesList,
        nycCommands: exports.nycCommands.testExclude,
        nycAlias: 'x',
    },
    excludeNodeModules: {
        description: 'whether or not to exclude all node_module folders (i.e. **/node_modules/**) by default',
        type: 'boolean',
        default: true,
        nycCommands: exports.nycCommands.testExclude,
    },
    include: {
        description: 'a list of specific files that should be covered, glob patterns are supported',
        type: 'array',
        items: {
            type: 'string',
        },
        default: [],
        nycCommands: exports.nycCommands.testExclude,
        nycAlias: 'n',
    },
    extension: {
        description: 'a list of extensions that nyc should handle in addition to .js',
        type: 'array',
        items: {
            type: 'string',
        },
        default: extensionsList,
        nycCommands: exports.nycCommands.testExclude,
        nycAlias: 'e',
    },
};
