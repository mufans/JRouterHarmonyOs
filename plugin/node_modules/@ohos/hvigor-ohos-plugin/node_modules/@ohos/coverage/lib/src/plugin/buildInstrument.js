"use strict";
/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2023-2023. All rights reserved.
 *
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildInstrument = void 0;
const instrument_1 = require("../instrument");
const fs = require("fs");
const path = require("path");
const os = require("os");
const magic_string_1 = require("magic-string");
const ohosTestInitPath = '.test/default/intermediates/ohosTest/init_coverage.json';
const unitTestInitPath = '.test/default/intermediates/test/init_coverage.json';
const ohosTest = 'ohosTest';
/**
 * 测试框架代码覆盖率收集代码插装插装 (编译构建调用)
 * @param projectConfig
 */
const buildInstrument = () => {
    return {
        name: 'buildInstrument',
        buildStart: buildStart,
        transform: transform,
        shouldInvalidCache: shouldInvalidCache,
    };
};
exports.buildInstrument = buildInstrument;
let flag;
/**
 * 功能：
 * @param {any} this
 */
async function buildStart() {
    let overallProject = this.share.projectConfig.overallProjectPaths;
    const testMode = this.share.projectConfig.testFrameworkPar.testMode;
    const modulePath = this.share.projectConfig.modulePath;
    deleteInvalidFileItem(testMode, modulePath, overallProject);
    const cacheNeedCoverageInsert = this.cache.get('needCoverageInsert');
    flag =
        cacheNeedCoverageInsert !== this.share.projectConfig.needCoverageInsert;
    this.cache.set('needCoverageInsert', this.share.projectConfig.needCoverageInsert);
}
function deleteInvalidFileItem(testMode, modulePath, overallProject) {
    let testInitPath = testMode == ohosTest
        ? path.join(modulePath, ohosTestInitPath)
        : path.join(modulePath, unitTestInitPath);
    if (!fs.existsSync(testInitPath)) {
        return;
    }
    if (!overallProject) {
        return;
    }
    let initCoverageData = fs.readFileSync(testInitPath);
    let initCoverageDataTemp = '{' + os.EOL + initCoverageData + '}';
    let initCoverageJson = JSON.parse(initCoverageDataTemp);
    for (let filePath of Object.keys(initCoverageJson)) {
        let isValid = false;
        for (let projectItem of overallProject) {
            if (filePath.includes(projectItem) && fs.existsSync(filePath)) {
                isValid = true;
                continue;
            }
        }
        if (!isValid) {
            fs.unlinkSync(testInitPath);
            return;
        }
    }
}
/**
 * 功能：
 * @param {any} this
 * @param {string} code
 * @param {string} id
 * @returns
 */
async function transform(code, id) {
    // 忽略虚拟文件
    if (id.startsWith('\0') || id.endsWith('.js')) {
        return;
    }
    if (!this.share.projectConfig.needCoverageInsert) {
        return;
    }
    const modulePath = this.share.projectConfig.modulePath;
    const sourceMap = this.getCombinedSourcemap();
    if (sourceMap === undefined) {
        return;
    }
    const sourceFilePath = sourceMap.sources[0];
    if (sourceFilePath === undefined) {
        return;
    }
    const projectPath = this.share.projectConfig.projectTopDir;
    const isFaMode = this.share.projectConfig.isFaMode;
    let testFrameworkParam = this.share.projectConfig.testFrameworkPar;
    let newCode = await (0, instrument_1.instrument)({
        projectPath: projectPath,
        modulePath: modulePath,
        source: code,
        sourceMap: sourceMap,
        testFrameworkParam: testFrameworkParam,
        id: id,
        isFaMode: isFaMode,
        overallProjectPaths: this.share.projectConfig.overallProjectPaths,
        mainModulePath: this.share.projectConfig.mainModulePath
    });
    code = newCode.source;
    const magicString = new magic_string_1.default(code);
    return {
        code: code,
        map: magicString.generateMap({ hires: true }),
    };
}
async function shouldInvalidCache() {
    return flag;
}
