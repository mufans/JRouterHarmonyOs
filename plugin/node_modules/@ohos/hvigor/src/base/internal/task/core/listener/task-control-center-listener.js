"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.onTaskUpToDated=exports.onTaskDisabled=exports.onTaskFailed=exports.onTaskFinished=exports.onWorkFailed=void 0;const hvigor_trace_js_1=require("../../../../common/trace/hvigor-trace.js"),hvigor_log_js_1=require("../../../../log/hvigor-log.js"),duration_event_js_1=require("../../../../metrics/event/duration-event.js"),log_event_1=require("../../../../metrics/event/log-event"),task_util_js_1=require("../../../../util/task-util.js"),time_util_js_1=require("../../../../util/time-util.js"),transform_hvigor_task_js_1=require("../../../../vigor/task/impl/transform-hvigor-task.js"),hvigor_process_js_1=require("../../../lifecycle/hvigor-process.js"),task_path_util_js_1=require("../../util/task-path-util.js"),task_control_center_js_1=require("../task-control-center.js"),log=hvigor_log_js_1.HvigorLogger.getLogger("hvigor-task-control-center-listener"),onWorkFailed=(t,e)=>{(0,exports.onTaskFailed)(t,e),hvigor_process_js_1.hvigorProcess.error(e,t.getTaskLog())};exports.onWorkFailed=onWorkFailed;const onTaskFinished=t=>{t.durationEvent.stop(duration_event_js_1.DurationEventState.SUCCESS),(0,task_util_js_1.markTaskExecuteSuccessful)(t);const e=process.hrtime(t.taskExecutedStatus.getTaskBeginTime()),o=(0,time_util_js_1.formatTime)((0,time_util_js_1.formatTimeToNumPair)((0,time_util_js_1.getIntersect)(t.taskExecutedStatus.getWorkerTimePeriod()))),s=""===o?(0,time_util_js_1.formatTime)(e):o,r=`Finished :${t.getPath()}`;t.durationEvent.setLog(r,log_event_1.MetricLogType.INFO,t.getDescription(),(0,time_util_js_1.getIntersect)(t.taskExecutedStatus.getWorkerTimePeriod())),log._printTaskExecuteInfo(t.getPath(),s),trace(t,e),task_control_center_js_1.taskControlCenter.setTaskExecuted(t.getPath())};function trace(t,e){if(t instanceof transform_hvigor_task_js_1.TransformHvigorTask)return;const o=(0,task_path_util_js_1.getModuleNameFromTaskPath)(t.getPath());hvigor_trace_js_1.hvigorTrace.traceTaskTime(t.getName(),o,1e9*e[0]+e[1])}exports.onTaskFinished=onTaskFinished;const onTaskFailed=(t,e)=>{t.durationEvent.stop(duration_event_js_1.DurationEventState.FAILED);const o=`Failed :${t.getPath()}`;t.durationEvent.setLog(o,log_event_1.MetricLogType.ERROR,t.getDescription()),t.onFailed(e),log._printFailedTaskInfo(t.getPath())};exports.onTaskFailed=onTaskFailed;const onTaskDisabled=t=>{t.durationEvent.stop(duration_event_js_1.DurationEventState.SUCCESS);const e=`Disabled :${t.getPath()}`;t.durationEvent.setLog(e,log_event_1.MetricLogType.INFO,t.getDescription()),log._printDisabledTaskInfo(t.getPath()),task_control_center_js_1.taskControlCenter.setTaskExecuted(t.getPath())};exports.onTaskDisabled=onTaskDisabled;const onTaskUpToDated=t=>{t.durationEvent.stop(duration_event_js_1.DurationEventState.SUCCESS);const e=`UP-TO-DATE :${t.getPath()}`;t.durationEvent.setLog(e,log_event_1.MetricLogType.INFO,t.getDescription()),(0,task_util_js_1.markTaskExecuteSuccessful)(t),log._printUpToDateTaskInfo(t.getPath()),task_control_center_js_1.taskControlCenter.setTaskExecuted(t.getPath())};exports.onTaskUpToDated=onTaskUpToDated;